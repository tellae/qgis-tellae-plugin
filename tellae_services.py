# -*- coding: utf-8 -*-
"""
/***************************************************************************
 TellaeServices
                                 A QGIS plugin
 Access Tellae services from QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-04-02
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tellae
        email                : contact@tellae.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTableWidget, QTableWidgetItem, QPushButton, QAbstractItemView

from qgis.core import (
    QgsApplication,
    QgsAuthMethodConfig,
    QgsProject,
    QgsVectorLayer,
    QgsMessageLog,
)

import requests

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .tellae_services_dialog import TellaeServicesDialog
from .tellae_auth_dialog import TellaeAuthDialog
import os.path

# Tellae imports
from .tellae_store import TellaeStore
from .tellae_client import requests as tellae_requests, binaries, version
from .utils import read_local_config, create_layer_instance, log, create_vector_layer_instance



class TellaeServices:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'TellaeServices_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Tellae Services')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # read local config if there is one
        res = read_local_config(self.plugin_dir)

        # Tellae attributes
        self.store = TellaeStore()

        self.layers = []

        self.selected_themes = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('TellaeServices', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/tellae_services/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Tellae services'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Tellae Services'),
                action)
            self.iface.removeToolBarIcon(action)

    def display_message(self, message: str):
        self.dlg.message.setText(message)

    def set_user_name(self):
        user = self.store.user
        user_name = f'{user["firstName"]} {user["lastName"]}'
        self.dlg.user_name.setText(user_name)

    def set_sdk_version(self):
        sdk_version = version.__version__
        self.dlg.version_label.setText(f"Client version: {sdk_version}")

    def set_layers_table(self):
        self.layers = self.store.get_filtered_layer_summary(self.selected_themes)

        headers = [
            {"text": "Nom", "value": lambda x: x["name"]["fr"], "width": 250},
            {"text": "Date", "value": lambda x: self.store.datasets_summary[x["main_dataset"]].get("date", ""), "width": 80},
            {"text": "Source", "value": lambda x: self.store.datasets_summary[x["main_dataset"]]["provider_name"], "width": 250},
            {"text": "Actions", "value": "actions", "width": 60}
        ]

        table = self.dlg.tableWidget

        table.setRowCount(len(self.layers))
        table.setColumnCount(len(headers))

        table.setHorizontalHeaderLabels([header["text"] for header in headers])

        for col, header in enumerate(headers):
            if "width" in header:
                table.setColumnWidth(col, header["width"])

        for row, layer in enumerate(self.layers):

            for col, header in enumerate(headers):
                item = QTableWidgetItem()
                if callable(header["value"]):
                    text = header["value"](layer)
                elif header["value"] == "actions":
                    btn = QPushButton(table)
                    btn.setText("Add")
                    btn.clicked.connect(lambda state, x=row: self.add_layer(x))
                    table.setCellWidget(row, col, btn)
                    continue
                else:
                    text = layer[header["value"]]

                item.setText(text)
                table.setItem(row, col, item)

        table.setEditTriggers(QTableWidget.NoEditTriggers)

    def add_layer(self, index):
        layer_item = self.layers[index]
        layer_type = layer_item["sourceType"]
        layer_name = layer_item["name"]["fr"]

        layer_data = layer_item["data"]
        if layer_type == "geojson":
            response = requests.get(layer_data, stream=True)
            layer = create_layer_instance(layer_name, response)
        elif layer_type == "shark":
            response = self.store.request_manager.shark(f"/layers/geojson/{layer_data}")
            layer = create_layer_instance(layer_name, response)
        elif layer_type == "vector":
            layer = create_vector_layer_instance(layer_name, layer_data)
        else:
            self.display_message(f"Unsupported layer type '{layer_type}'")
            return

        QgsProject.instance().addMapLayer(layer)

        self.display_message(f"La couche '{layer_name}' a été ajoutée avec succès !")

    def create_theme_selector(self):
        self.dlg.themeSelector.addItems(self.store.themes)

        self.dlg.themeSelector.itemSelectionChanged.connect(self.update_themes)

    def update_themes(self):

        self.selected_themes = [item.text() for item in self.dlg.themeSelector.selectedItems()]

        self.set_layers_table()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = TellaeServicesDialog()
            self.auth = TellaeAuthDialog()
            self.set_user_name()
            self.set_sdk_version()
            self.create_theme_selector()
            self.set_layers_table()



        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
